//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FEELGrammar.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RulesDoer.Core.Expressions.FEEL {



using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="FEELGrammar"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public interface IFEELGrammarVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression([NotNull] FEELGrammar.ExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.simpleExpressions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSimpleExpressions([NotNull] FEELGrammar.SimpleExpressionsContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>arithmeticExpr</c>
	/// labeled alternative in <see cref="FEELGrammar.simpleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArithmeticExpr([NotNull] FEELGrammar.ArithmeticExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>simpleValueExpr</c>
	/// labeled alternative in <see cref="FEELGrammar.simpleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSimpleValueExpr([NotNull] FEELGrammar.SimpleValueExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>forExpr</c>
	/// labeled alternative in <see cref="FEELGrammar.textualExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForExpr([NotNull] FEELGrammar.ForExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ifExpr</c>
	/// labeled alternative in <see cref="FEELGrammar.textualExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfExpr([NotNull] FEELGrammar.IfExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>quantifiedExpr</c>
	/// labeled alternative in <see cref="FEELGrammar.textualExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitQuantifiedExpr([NotNull] FEELGrammar.QuantifiedExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>disjunctionExpr</c>
	/// labeled alternative in <see cref="FEELGrammar.textualExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDisjunctionExpr([NotNull] FEELGrammar.DisjunctionExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.forExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForExpression([NotNull] FEELGrammar.ForExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.iterationContext"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIterationContext([NotNull] FEELGrammar.IterationContextContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.ifExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfExpression([NotNull] FEELGrammar.IfExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.quantifiedExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitQuantifiedExpression([NotNull] FEELGrammar.QuantifiedExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.disjunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDisjunction([NotNull] FEELGrammar.DisjunctionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.conjunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConjunction([NotNull] FEELGrammar.ConjunctionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.comparison"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitComparison([NotNull] FEELGrammar.ComparisonContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.arithmeticExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArithmeticExpression([NotNull] FEELGrammar.ArithmeticExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.addition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddition([NotNull] FEELGrammar.AdditionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.subtraction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSubtraction([NotNull] FEELGrammar.SubtractionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.multiplication"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplication([NotNull] FEELGrammar.MultiplicationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.division"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDivision([NotNull] FEELGrammar.DivisionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.exponentiation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExponentiation([NotNull] FEELGrammar.ExponentiationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.arithmeticNegation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArithmeticNegation([NotNull] FEELGrammar.ArithmeticNegationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>simpleLiteralExpr</c>
	/// labeled alternative in <see cref="FEELGrammar.simpleValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSimpleLiteralExpr([NotNull] FEELGrammar.SimpleLiteralExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>qualifiedNameExpr</c>
	/// labeled alternative in <see cref="FEELGrammar.simpleValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitQualifiedNameExpr([NotNull] FEELGrammar.QualifiedNameExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.qualifiedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitQualifiedName([NotNull] FEELGrammar.QualifiedNameContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>simpleLitExpr</c>
	/// labeled alternative in <see cref="FEELGrammar.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSimpleLitExpr([NotNull] FEELGrammar.SimpleLitExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>nullExpr</c>
	/// labeled alternative in <see cref="FEELGrammar.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNullExpr([NotNull] FEELGrammar.NullExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>numericLiteralExpr</c>
	/// labeled alternative in <see cref="FEELGrammar.simpleLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumericLiteralExpr([NotNull] FEELGrammar.NumericLiteralExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>stringLiteralExpr</c>
	/// labeled alternative in <see cref="FEELGrammar.simpleLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringLiteralExpr([NotNull] FEELGrammar.StringLiteralExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>booleanLiteralExpr</c>
	/// labeled alternative in <see cref="FEELGrammar.simpleLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBooleanLiteralExpr([NotNull] FEELGrammar.BooleanLiteralExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>dateTimeLiteralExpr</c>
	/// labeled alternative in <see cref="FEELGrammar.simpleLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDateTimeLiteralExpr([NotNull] FEELGrammar.DateTimeLiteralExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.dateTimeLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDateTimeLiteral([NotNull] FEELGrammar.DateTimeLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifier([NotNull] FEELGrammar.IdentifierContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.stringLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringLiteral([NotNull] FEELGrammar.StringLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.booleanLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBooleanLiteral([NotNull] FEELGrammar.BooleanLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.numericLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumericLiteral([NotNull] FEELGrammar.NumericLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.intervalStartPar"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIntervalStartPar([NotNull] FEELGrammar.IntervalStartParContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FEELGrammar.intervalEndPar"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIntervalEndPar([NotNull] FEELGrammar.IntervalEndParContext context);
}
} // namespace RulesDoer.Core.Expressions.FEEL
