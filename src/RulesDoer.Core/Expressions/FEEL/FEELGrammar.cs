//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FEELGrammar.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RulesDoer.Core.Expressions.FEEL {



using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class FEELGrammar : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BLOCK_COMMENT=1, LINE_COMMENT=2, WS=3, STRING=4, NUMBER=5, EQ=6, NE=7, 
		LT=8, GT=9, LE=10, GE=11, PLUS=12, MINUS=13, STAR=14, FORWARD_SLASH=15, 
		STAR_STAR=16, DOT_DOT=17, DOT=18, COMMA=19, PAREN_OPEN=20, PAREN_CLOSE=21, 
		BRACKET_OPEN=22, BRACKET_CLOSE=23, BRACE_OPEN=24, BRACE_CLOSE=25, COLON=26, 
		NOT=27, TRUE=28, FALSE=29, NULL=30, FUNCTION=31, EXTERNAL=32, FOR=33, 
		IN=34, RETURN=35, IF=36, THEN=37, ELSE=38, SOME=39, EVERY=40, SATISFIES=41, 
		AND=42, OR=43, BETWEEN=44, INSTANCE_OF=45, NAME=46;
	public const int
		RULE_expression = 0, RULE_simpleExpressions = 1, RULE_simpleExpression = 2, 
		RULE_textualExpression = 3, RULE_forExpression = 4, RULE_iterationContext = 5, 
		RULE_ifExpression = 6, RULE_quantifiedExpression = 7, RULE_disjunction = 8, 
		RULE_conjunction = 9, RULE_comparison = 10, RULE_arithmeticExpression = 11, 
		RULE_addition = 12, RULE_subtraction = 13, RULE_multiplication = 14, RULE_division = 15, 
		RULE_exponentiation = 16, RULE_arithmeticNegation = 17, RULE_simpleValue = 18, 
		RULE_qualifiedName = 19, RULE_literal = 20, RULE_simpleLiteral = 21, RULE_dateTimeLiteral = 22, 
		RULE_identifier = 23, RULE_stringLiteral = 24, RULE_booleanLiteral = 25, 
		RULE_numericLiteral = 26, RULE_intervalStartPar = 27, RULE_intervalEndPar = 28;
	public static readonly string[] ruleNames = {
		"expression", "simpleExpressions", "simpleExpression", "textualExpression", 
		"forExpression", "iterationContext", "ifExpression", "quantifiedExpression", 
		"disjunction", "conjunction", "comparison", "arithmeticExpression", "addition", 
		"subtraction", "multiplication", "division", "exponentiation", "arithmeticNegation", 
		"simpleValue", "qualifiedName", "literal", "simpleLiteral", "dateTimeLiteral", 
		"identifier", "stringLiteral", "booleanLiteral", "numericLiteral", "intervalStartPar", 
		"intervalEndPar"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'!='", "'<'", "'>'", "'<='", 
		"'>='", "'+'", "'-'", "'*'", "'/'", "'**'", "'..'", "'.'", "','", "'('", 
		"')'", "'['", "']'", "'{'", "'}'", "':'", "'not'", "'true'", "'false'", 
		"'null'", "'function'", "'external'", "'for'", "'in'", "'return'", "'if'", 
		"'then'", "'else'", "'some'", "'every'", "'satisfies'", "'and'", "'or'", 
		"'between'", "'instance of'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BLOCK_COMMENT", "LINE_COMMENT", "WS", "STRING", "NUMBER", "EQ", 
		"NE", "LT", "GT", "LE", "GE", "PLUS", "MINUS", "STAR", "FORWARD_SLASH", 
		"STAR_STAR", "DOT_DOT", "DOT", "COMMA", "PAREN_OPEN", "PAREN_CLOSE", "BRACKET_OPEN", 
		"BRACKET_CLOSE", "BRACE_OPEN", "BRACE_CLOSE", "COLON", "NOT", "TRUE", 
		"FALSE", "NULL", "FUNCTION", "EXTERNAL", "FOR", "IN", "RETURN", "IF", 
		"THEN", "ELSE", "SOME", "EVERY", "SATISFIES", "AND", "OR", "BETWEEN", 
		"INSTANCE_OF", "NAME"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FEELGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FEELGrammar() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}




		public FEELGrammar(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FEELGrammar(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ExpressionContext : ParserRuleContext {
		public TextualExpressionContext textualExpression() {
			return GetRuleContext<TextualExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(FEELGrammar.Eof, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; textualExpression();
			State = 59; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExpressionsContext : ParserRuleContext {
		public SimpleExpressionContext exp;
		public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(FEELGrammar.Eof, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(FEELGrammar.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FEELGrammar.COMMA, i);
		}
		public SimpleExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpressions; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionsContext simpleExpressions() {
		SimpleExpressionsContext _localctx = new SimpleExpressionsContext(Context, State);
		EnterRule(_localctx, 2, RULE_simpleExpressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; simpleExpression();
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 62; Match(COMMA);
				State = 63; _localctx.exp = simpleExpression();
				}
				}
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 69; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
	 
		public SimpleExpressionContext() { }
		public virtual void CopyFrom(SimpleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleValueExprContext : SimpleExpressionContext {
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public SimpleValueExprContext(SimpleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleValueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticExprContext : SimpleExpressionContext {
		public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		public ArithmeticExprContext(SimpleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_simpleExpression);
		try {
			State = 73;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				_localctx = new ArithmeticExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 71; arithmeticExpression();
				}
				}
				break;
			case 2:
				_localctx = new SimpleValueExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 72; simpleValue();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextualExpressionContext : ParserRuleContext {
		public TextualExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textualExpression; } }
	 
		public TextualExpressionContext() { }
		public virtual void CopyFrom(TextualExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ForExprContext : TextualExpressionContext {
		public ForExpressionContext forExpression() {
			return GetRuleContext<ForExpressionContext>(0);
		}
		public ForExprContext(TextualExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DisjunctionExprContext : TextualExpressionContext {
		public DisjunctionContext disjunction() {
			return GetRuleContext<DisjunctionContext>(0);
		}
		public DisjunctionExprContext(TextualExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisjunctionExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExprContext : TextualExpressionContext {
		public IfExpressionContext ifExpression() {
			return GetRuleContext<IfExpressionContext>(0);
		}
		public IfExprContext(TextualExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QuantifiedExprContext : TextualExpressionContext {
		public QuantifiedExpressionContext quantifiedExpression() {
			return GetRuleContext<QuantifiedExpressionContext>(0);
		}
		public QuantifiedExprContext(TextualExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantifiedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextualExpressionContext textualExpression() {
		TextualExpressionContext _localctx = new TextualExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_textualExpression);
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				_localctx = new ForExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 75; forExpression();
				}
				}
				break;
			case IF:
				_localctx = new IfExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 76; ifExpression();
				}
				}
				break;
			case SOME:
			case EVERY:
				_localctx = new QuantifiedExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 77; quantifiedExpression();
				}
				}
				break;
			case STRING:
			case NUMBER:
			case MINUS:
			case TRUE:
			case FALSE:
			case NULL:
			case AND:
			case OR:
			case NAME:
				_localctx = new DisjunctionExprContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 78; disjunction();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForExpressionContext : ParserRuleContext {
		public IdentifierContext var;
		public IterationContextContext domain;
		public ExpressionContext body;
		public ITerminalNode FOR() { return GetToken(FEELGrammar.FOR, 0); }
		public ITerminalNode[] IN() { return GetTokens(FEELGrammar.IN); }
		public ITerminalNode IN(int i) {
			return GetToken(FEELGrammar.IN, i);
		}
		public ITerminalNode RETURN() { return GetToken(FEELGrammar.RETURN, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public IterationContextContext[] iterationContext() {
			return GetRuleContexts<IterationContextContext>();
		}
		public IterationContextContext iterationContext(int i) {
			return GetRuleContext<IterationContextContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FEELGrammar.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FEELGrammar.COMMA, i);
		}
		public ForExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForExpressionContext forExpression() {
		ForExpressionContext _localctx = new ForExpressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_forExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(FOR);
			State = 82; _localctx.var = identifier();
			State = 83; Match(IN);
			State = 84; _localctx.domain = iterationContext();
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 85; Match(COMMA);
				State = 86; _localctx.var = identifier();
				State = 87; Match(IN);
				State = 88; _localctx.domain = iterationContext();
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 95; Match(RETURN);
			State = 96; _localctx.body = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationContextContext : ParserRuleContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DOT_DOT() { return GetToken(FEELGrammar.DOT_DOT, 0); }
		public IterationContextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationContext; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationContext(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationContextContext iterationContext() {
		IterationContextContext _localctx = new IterationContextContext(Context, State);
		EnterRule(_localctx, 10, RULE_iterationContext);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; _localctx.left = expression();
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT_DOT) {
				{
				State = 99; Match(DOT_DOT);
				State = 100; _localctx.right = expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExpressionContext : ParserRuleContext {
		public ExpressionContext cond;
		public ExpressionContext exprOne;
		public ExpressionContext exprTwo;
		public ITerminalNode IF() { return GetToken(FEELGrammar.IF, 0); }
		public ITerminalNode THEN() { return GetToken(FEELGrammar.THEN, 0); }
		public ITerminalNode ELSE() { return GetToken(FEELGrammar.ELSE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExpressionContext ifExpression() {
		IfExpressionContext _localctx = new IfExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_ifExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(IF);
			State = 104; _localctx.cond = expression();
			State = 105; Match(THEN);
			State = 106; _localctx.exprOne = expression();
			State = 107; Match(ELSE);
			State = 108; _localctx.exprTwo = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuantifiedExpressionContext : ParserRuleContext {
		public IToken op;
		public IdentifierContext var;
		public ExpressionContext domain;
		public ExpressionContext body;
		public ITerminalNode[] IN() { return GetTokens(FEELGrammar.IN); }
		public ITerminalNode IN(int i) {
			return GetToken(FEELGrammar.IN, i);
		}
		public ITerminalNode SATISFIES() { return GetToken(FEELGrammar.SATISFIES, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode SOME() { return GetToken(FEELGrammar.SOME, 0); }
		public ITerminalNode EVERY() { return GetToken(FEELGrammar.EVERY, 0); }
		public QuantifiedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quantifiedExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantifiedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuantifiedExpressionContext quantifiedExpression() {
		QuantifiedExpressionContext _localctx = new QuantifiedExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_quantifiedExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SOME:
				{
				State = 110; _localctx.op = Match(SOME);
				}
				break;
			case EVERY:
				{
				State = 111; _localctx.op = Match(EVERY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 114; _localctx.var = identifier();
			State = 115; Match(IN);
			State = 116; _localctx.domain = expression();
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << OR) | (1L << NAME))) != 0)) {
				{
				{
				State = 117; _localctx.var = identifier();
				State = 118; Match(IN);
				State = 119; _localctx.domain = expression();
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 126; Match(SATISFIES);
			State = 127; _localctx.body = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisjunctionContext : ParserRuleContext {
		public ConjunctionContext left;
		public ConjunctionContext right;
		public ConjunctionContext[] conjunction() {
			return GetRuleContexts<ConjunctionContext>();
		}
		public ConjunctionContext conjunction(int i) {
			return GetRuleContext<ConjunctionContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(FEELGrammar.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(FEELGrammar.OR, i);
		}
		public DisjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disjunction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisjunctionContext disjunction() {
		DisjunctionContext _localctx = new DisjunctionContext(Context, State);
		EnterRule(_localctx, 16, RULE_disjunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; _localctx.left = conjunction();
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 130; Match(OR);
				State = 131; _localctx.right = conjunction();
				}
				}
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConjunctionContext : ParserRuleContext {
		public ComparisonContext left;
		public ComparisonContext right;
		public ComparisonContext[] comparison() {
			return GetRuleContexts<ComparisonContext>();
		}
		public ComparisonContext comparison(int i) {
			return GetRuleContext<ComparisonContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(FEELGrammar.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(FEELGrammar.AND, i);
		}
		public ConjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conjunction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConjunctionContext conjunction() {
		ConjunctionContext _localctx = new ConjunctionContext(Context, State);
		EnterRule(_localctx, 18, RULE_conjunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; _localctx.left = comparison();
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 138; Match(AND);
				State = 139; _localctx.right = comparison();
				}
				}
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public ArithmeticExpressionContext firstAst;
		public IToken op;
		public ArithmeticExpressionContext secondAst;
		public ExpressionContext left;
		public ExpressionContext right;
		public ArithmeticExpressionContext[] arithmeticExpression() {
			return GetRuleContexts<ArithmeticExpressionContext>();
		}
		public ArithmeticExpressionContext arithmeticExpression(int i) {
			return GetRuleContext<ArithmeticExpressionContext>(i);
		}
		public ITerminalNode BETWEEN() { return GetToken(FEELGrammar.BETWEEN, 0); }
		public ITerminalNode AND() { return GetToken(FEELGrammar.AND, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(FEELGrammar.EQ, 0); }
		public ITerminalNode NE() { return GetToken(FEELGrammar.NE, 0); }
		public ITerminalNode LT() { return GetToken(FEELGrammar.LT, 0); }
		public ITerminalNode GT() { return GetToken(FEELGrammar.GT, 0); }
		public ITerminalNode LE() { return GetToken(FEELGrammar.LE, 0); }
		public ITerminalNode GE() { return GetToken(FEELGrammar.GE, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 20, RULE_comparison);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; _localctx.firstAst = arithmeticExpression();
			State = 160;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQ:
			case NE:
			case LT:
			case GT:
			case LE:
			case GE:
				{
				{
				State = 152;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EQ:
					{
					State = 146; _localctx.op = Match(EQ);
					}
					break;
				case NE:
					{
					State = 147; _localctx.op = Match(NE);
					}
					break;
				case LT:
					{
					State = 148; _localctx.op = Match(LT);
					}
					break;
				case GT:
					{
					State = 149; _localctx.op = Match(GT);
					}
					break;
				case LE:
					{
					State = 150; _localctx.op = Match(LE);
					}
					break;
				case GE:
					{
					State = 151; _localctx.op = Match(GE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 154; _localctx.secondAst = arithmeticExpression();
				}
				}
				break;
			case BETWEEN:
				{
				{
				State = 155; Match(BETWEEN);
				State = 156; _localctx.left = expression();
				State = 157; Match(AND);
				State = 158; _localctx.right = expression();
				}
				}
				break;
			case Eof:
			case AND:
			case OR:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticExpressionContext : ParserRuleContext {
		public AdditionContext addition() {
			return GetRuleContext<AdditionContext>(0);
		}
		public ArithmeticExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticExpressionContext arithmeticExpression() {
		ArithmeticExpressionContext _localctx = new ArithmeticExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_arithmeticExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; addition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionContext : ParserRuleContext {
		public SubtractionContext left;
		public SubtractionContext right;
		public SubtractionContext[] subtraction() {
			return GetRuleContexts<SubtractionContext>();
		}
		public SubtractionContext subtraction(int i) {
			return GetRuleContext<SubtractionContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(FEELGrammar.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(FEELGrammar.PLUS, i);
		}
		public AdditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditionContext addition() {
		AdditionContext _localctx = new AdditionContext(Context, State);
		EnterRule(_localctx, 24, RULE_addition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; _localctx.left = subtraction();
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS) {
				{
				{
				State = 165; Match(PLUS);
				State = 166; _localctx.right = subtraction();
				}
				}
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractionContext : ParserRuleContext {
		public MultiplicationContext left;
		public MultiplicationContext right;
		public MultiplicationContext[] multiplication() {
			return GetRuleContexts<MultiplicationContext>();
		}
		public MultiplicationContext multiplication(int i) {
			return GetRuleContext<MultiplicationContext>(i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(FEELGrammar.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(FEELGrammar.MINUS, i);
		}
		public SubtractionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtraction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtraction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubtractionContext subtraction() {
		SubtractionContext _localctx = new SubtractionContext(Context, State);
		EnterRule(_localctx, 26, RULE_subtraction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; _localctx.left = multiplication();
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MINUS) {
				{
				{
				State = 173; Match(MINUS);
				State = 174; _localctx.right = multiplication();
				}
				}
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicationContext : ParserRuleContext {
		public DivisionContext left;
		public DivisionContext right;
		public DivisionContext[] division() {
			return GetRuleContexts<DivisionContext>();
		}
		public DivisionContext division(int i) {
			return GetRuleContext<DivisionContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(FEELGrammar.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(FEELGrammar.STAR, i);
		}
		public MultiplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplication; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicationContext multiplication() {
		MultiplicationContext _localctx = new MultiplicationContext(Context, State);
		EnterRule(_localctx, 28, RULE_multiplication);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; _localctx.left = division();
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STAR) {
				{
				{
				State = 181; Match(STAR);
				State = 182; _localctx.right = division();
				}
				}
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivisionContext : ParserRuleContext {
		public ExponentiationContext left;
		public ExponentiationContext right;
		public ExponentiationContext[] exponentiation() {
			return GetRuleContexts<ExponentiationContext>();
		}
		public ExponentiationContext exponentiation(int i) {
			return GetRuleContext<ExponentiationContext>(i);
		}
		public ITerminalNode[] FORWARD_SLASH() { return GetTokens(FEELGrammar.FORWARD_SLASH); }
		public ITerminalNode FORWARD_SLASH(int i) {
			return GetToken(FEELGrammar.FORWARD_SLASH, i);
		}
		public DivisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_division; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivision(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DivisionContext division() {
		DivisionContext _localctx = new DivisionContext(Context, State);
		EnterRule(_localctx, 30, RULE_division);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; _localctx.left = exponentiation();
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FORWARD_SLASH) {
				{
				{
				State = 189; Match(FORWARD_SLASH);
				State = 190; _localctx.right = exponentiation();
				}
				}
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExponentiationContext : ParserRuleContext {
		public ArithmeticNegationContext left;
		public ArithmeticNegationContext right;
		public ArithmeticNegationContext[] arithmeticNegation() {
			return GetRuleContexts<ArithmeticNegationContext>();
		}
		public ArithmeticNegationContext arithmeticNegation(int i) {
			return GetRuleContext<ArithmeticNegationContext>(i);
		}
		public ITerminalNode[] STAR_STAR() { return GetTokens(FEELGrammar.STAR_STAR); }
		public ITerminalNode STAR_STAR(int i) {
			return GetToken(FEELGrammar.STAR_STAR, i);
		}
		public ExponentiationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponentiation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponentiation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExponentiationContext exponentiation() {
		ExponentiationContext _localctx = new ExponentiationContext(Context, State);
		EnterRule(_localctx, 32, RULE_exponentiation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; _localctx.left = arithmeticNegation();
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STAR_STAR) {
				{
				{
				State = 197; Match(STAR_STAR);
				State = 198; _localctx.right = arithmeticNegation();
				}
				}
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticNegationContext : ParserRuleContext {
		public LiteralContext expr;
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode[] MINUS() { return GetTokens(FEELGrammar.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(FEELGrammar.MINUS, i);
		}
		public ArithmeticNegationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticNegation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticNegation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticNegationContext arithmeticNegation() {
		ArithmeticNegationContext _localctx = new ArithmeticNegationContext(Context, State);
		EnterRule(_localctx, 34, RULE_arithmeticNegation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MINUS) {
				{
				{
				State = 204; Match(MINUS);
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 210; _localctx.expr = literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleValueContext : ParserRuleContext {
		public SimpleValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleValue; } }
	 
		public SimpleValueContext() { }
		public virtual void CopyFrom(SimpleValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleLiteralExprContext : SimpleValueContext {
		public SimpleLiteralContext simpleLiteral() {
			return GetRuleContext<SimpleLiteralContext>(0);
		}
		public SimpleLiteralExprContext(SimpleValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QualifiedNameExprContext : SimpleValueContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public QualifiedNameExprContext(SimpleValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNameExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleValueContext simpleValue() {
		SimpleValueContext _localctx = new SimpleValueContext(Context, State);
		EnterRule(_localctx, 36, RULE_simpleValue);
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				_localctx = new SimpleLiteralExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 212; simpleLiteral();
				}
				}
				break;
			case 2:
				_localctx = new QualifiedNameExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 213; qualifiedName();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(FEELGrammar.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(FEELGrammar.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 38, RULE_qualifiedName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; _localctx.name = identifier();
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 217; Match(DOT);
				State = 218; _localctx.name = identifier();
				}
				}
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleLitExprContext : LiteralContext {
		public SimpleLiteralContext simpleLiteral() {
			return GetRuleContext<SimpleLiteralContext>(0);
		}
		public SimpleLitExprContext(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullExprContext : LiteralContext {
		public ITerminalNode NULL() { return GetToken(FEELGrammar.NULL, 0); }
		public NullExprContext(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 40, RULE_literal);
		try {
			State = 226;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case NUMBER:
			case TRUE:
			case FALSE:
			case AND:
			case OR:
			case NAME:
				_localctx = new SimpleLitExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 224; simpleLiteral();
				}
				}
				break;
			case NULL:
				_localctx = new NullExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 225; Match(NULL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleLiteralContext : ParserRuleContext {
		public SimpleLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleLiteral; } }
	 
		public SimpleLiteralContext() { }
		public virtual void CopyFrom(SimpleLiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringLiteralExprContext : SimpleLiteralContext {
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public StringLiteralExprContext(SimpleLiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateTimeLiteralExprContext : SimpleLiteralContext {
		public DateTimeLiteralContext dateTimeLiteral() {
			return GetRuleContext<DateTimeLiteralContext>(0);
		}
		public DateTimeLiteralExprContext(SimpleLiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericLiteralExprContext : SimpleLiteralContext {
		public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public NumericLiteralExprContext(SimpleLiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralExprContext : SimpleLiteralContext {
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public BooleanLiteralExprContext(SimpleLiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleLiteralContext simpleLiteral() {
		SimpleLiteralContext _localctx = new SimpleLiteralContext(Context, State);
		EnterRule(_localctx, 42, RULE_simpleLiteral);
		try {
			State = 232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				_localctx = new NumericLiteralExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 228; numericLiteral();
				}
				}
				break;
			case STRING:
				_localctx = new StringLiteralExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 229; stringLiteral();
				}
				}
				break;
			case TRUE:
			case FALSE:
				_localctx = new BooleanLiteralExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 230; booleanLiteral();
				}
				}
				break;
			case AND:
			case OR:
			case NAME:
				_localctx = new DateTimeLiteralExprContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 231; dateTimeLiteral();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeLiteralContext : ParserRuleContext {
		public IdentifierContext kind;
		public ITerminalNode PAREN_OPEN() { return GetToken(FEELGrammar.PAREN_OPEN, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ITerminalNode PAREN_CLOSE() { return GetToken(FEELGrammar.PAREN_CLOSE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DateTimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeLiteralContext dateTimeLiteral() {
		DateTimeLiteralContext _localctx = new DateTimeLiteralContext(Context, State);
		EnterRule(_localctx, 44, RULE_dateTimeLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 234; _localctx.kind = identifier();
			}
			State = 235; Match(PAREN_OPEN);
			State = 236; stringLiteral();
			State = 237; Match(PAREN_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IToken token;
		public ITerminalNode NAME() { return GetToken(FEELGrammar.NAME, 0); }
		public ITerminalNode OR() { return GetToken(FEELGrammar.OR, 0); }
		public ITerminalNode AND() { return GetToken(FEELGrammar.AND, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 46, RULE_identifier);
		try {
			State = 242;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 239; _localctx.token = Match(NAME);
				}
				}
				break;
			case OR:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 240; _localctx.token = Match(OR);
				}
				}
				break;
			case AND:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 241; _localctx.token = Match(AND);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public IToken lit;
		public ITerminalNode STRING() { return GetToken(FEELGrammar.STRING, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 48, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; _localctx.lit = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public IToken lit;
		public ITerminalNode TRUE() { return GetToken(FEELGrammar.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(FEELGrammar.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 50, RULE_booleanLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
				{
				State = 246; _localctx.lit = Match(TRUE);
				}
				break;
			case FALSE:
				{
				State = 247; _localctx.lit = Match(FALSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		public IToken lit;
		public ITerminalNode NUMBER() { return GetToken(FEELGrammar.NUMBER, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 52, RULE_numericLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; _localctx.lit = Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalStartParContext : ParserRuleContext {
		public IToken token;
		public ITerminalNode PAREN_OPEN() { return GetToken(FEELGrammar.PAREN_OPEN, 0); }
		public ITerminalNode BRACKET_CLOSE() { return GetToken(FEELGrammar.BRACKET_CLOSE, 0); }
		public ITerminalNode BRACKET_OPEN() { return GetToken(FEELGrammar.BRACKET_OPEN, 0); }
		public IntervalStartParContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalStartPar; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalStartPar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalStartParContext intervalStartPar() {
		IntervalStartParContext _localctx = new IntervalStartParContext(Context, State);
		EnterRule(_localctx, 54, RULE_intervalStartPar);
		try {
			State = 255;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PAREN_OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 252; _localctx.token = Match(PAREN_OPEN);
				}
				}
				break;
			case BRACKET_CLOSE:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 253; _localctx.token = Match(BRACKET_CLOSE);
				}
				}
				break;
			case BRACKET_OPEN:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 254; _localctx.token = Match(BRACKET_OPEN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalEndParContext : ParserRuleContext {
		public IToken token;
		public ITerminalNode PAREN_CLOSE() { return GetToken(FEELGrammar.PAREN_CLOSE, 0); }
		public ITerminalNode BRACKET_OPEN() { return GetToken(FEELGrammar.BRACKET_OPEN, 0); }
		public ITerminalNode BRACKET_CLOSE() { return GetToken(FEELGrammar.BRACKET_CLOSE, 0); }
		public IntervalEndParContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalEndPar; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFEELGrammarVisitor<TResult> typedVisitor = visitor as IFEELGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalEndPar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalEndParContext intervalEndPar() {
		IntervalEndParContext _localctx = new IntervalEndParContext(Context, State);
		EnterRule(_localctx, 56, RULE_intervalEndPar);
		try {
			State = 260;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PAREN_CLOSE:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 257; _localctx.token = Match(PAREN_CLOSE);
				}
				}
				break;
			case BRACKET_OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 258; _localctx.token = Match(BRACKET_OPEN);
				}
				}
				break;
			case BRACKET_CLOSE:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 259; _localctx.token = Match(BRACKET_CLOSE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x30', '\x109', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x43', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x46', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'L', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'R', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\a', '\x6', ']', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '`', '\v', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', 'h', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', 's', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '|', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '\x7F', '\v', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 
		'\x87', '\n', '\n', '\f', '\n', '\xE', '\n', '\x8A', '\v', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x8F', '\n', '\v', '\f', 
		'\v', '\xE', '\v', '\x92', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\x9B', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x5', '\f', '\xA3', '\n', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xAA', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xAD', '\v', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xB2', '\n', '\xF', '\f', '\xF', 
		'\xE', '\xF', '\xB5', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\a', '\x10', '\xBA', '\n', '\x10', '\f', '\x10', '\xE', '\x10', 
		'\xBD', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', 
		'\x11', '\xC2', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xC5', '\v', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\xCA', 
		'\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xCD', '\v', '\x12', '\x3', 
		'\x13', '\a', '\x13', '\xD0', '\n', '\x13', '\f', '\x13', '\xE', '\x13', 
		'\xD3', '\v', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x5', '\x14', '\xD9', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\a', '\x15', '\xDE', '\n', '\x15', '\f', '\x15', '\xE', 
		'\x15', '\xE1', '\v', '\x15', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\xE5', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\xEB', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\xF5', '\n', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\xFB', '\n', '\x1B', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x5', '\x1D', '\x102', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x107', '\n', '\x1E', '\x3', '\x1E', '\x2', '\x2', 
		'\x1F', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '\x2', '\x2', 
		'\x2', '\x110', '\x2', '<', '\x3', '\x2', '\x2', '\x2', '\x4', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x6', 'K', '\x3', '\x2', '\x2', '\x2', '\b', 'Q', 
		'\x3', '\x2', '\x2', '\x2', '\n', 'S', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\xE', 'i', '\x3', '\x2', '\x2', '\x2', 
		'\x10', 'r', '\x3', '\x2', '\x2', '\x2', '\x12', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x16', '\x93', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xA4', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xA6', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\xB6', '\x3', '\x2', '\x2', '\x2', ' ', '\xBE', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\xC6', '\x3', '\x2', '\x2', '\x2', 
		'$', '\xD1', '\x3', '\x2', '\x2', '\x2', '&', '\xD8', '\x3', '\x2', '\x2', 
		'\x2', '(', '\xDA', '\x3', '\x2', '\x2', '\x2', '*', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', ',', '\xEA', '\x3', '\x2', '\x2', '\x2', '.', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\xF4', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\xF6', '\x3', '\x2', '\x2', '\x2', '\x34', '\xFA', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x38', '\x101', '\x3', 
		'\x2', '\x2', '\x2', ':', '\x106', '\x3', '\x2', '\x2', '\x2', '<', '=', 
		'\x5', '\b', '\x5', '\x2', '=', '>', '\a', '\x2', '\x2', '\x3', '>', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '?', '\x44', '\x5', '\x6', '\x4', '\x2', '@', 
		'\x41', '\a', '\x15', '\x2', '\x2', '\x41', '\x43', '\x5', '\x6', '\x4', 
		'\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x43', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x45', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', '\x2', 
		'\x2', '\x3', 'H', '\x5', '\x3', '\x2', '\x2', '\x2', 'I', 'L', '\x5', 
		'\x18', '\r', '\x2', 'J', 'L', '\x5', '&', '\x14', '\x2', 'K', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'J', '\x3', '\x2', '\x2', '\x2', 'L', '\a', 
		'\x3', '\x2', '\x2', '\x2', 'M', 'R', '\x5', '\n', '\x6', '\x2', 'N', 
		'R', '\x5', '\xE', '\b', '\x2', 'O', 'R', '\x5', '\x10', '\t', '\x2', 
		'P', 'R', '\x5', '\x12', '\n', '\x2', 'Q', 'M', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'N', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'R', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\a', '#', '\x2', '\x2', 'T', 'U', '\x5', '\x30', '\x19', 
		'\x2', 'U', 'V', '\a', '$', '\x2', '\x2', 'V', '^', '\x5', '\f', '\a', 
		'\x2', 'W', 'X', '\a', '\x15', '\x2', '\x2', 'X', 'Y', '\x5', '\x30', 
		'\x19', '\x2', 'Y', 'Z', '\a', '$', '\x2', '\x2', 'Z', '[', '\x5', '\f', 
		'\a', '\x2', '[', ']', '\x3', '\x2', '\x2', '\x2', '\\', 'W', '\x3', '\x2', 
		'\x2', '\x2', ']', '`', '\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', 
		'\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\a', '%', '\x2', '\x2', '\x62', '\x63', '\x5', '\x2', '\x2', 
		'\x2', '\x63', '\v', '\x3', '\x2', '\x2', '\x2', '\x64', 'g', '\x5', '\x2', 
		'\x2', '\x2', '\x65', '\x66', '\a', '\x13', '\x2', '\x2', '\x66', 'h', 
		'\x5', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'g', 
		'h', '\x3', '\x2', '\x2', '\x2', 'h', '\r', '\x3', '\x2', '\x2', '\x2', 
		'i', 'j', '\a', '&', '\x2', '\x2', 'j', 'k', '\x5', '\x2', '\x2', '\x2', 
		'k', 'l', '\a', '\'', '\x2', '\x2', 'l', 'm', '\x5', '\x2', '\x2', '\x2', 
		'm', 'n', '\a', '(', '\x2', '\x2', 'n', 'o', '\x5', '\x2', '\x2', '\x2', 
		'o', '\xF', '\x3', '\x2', '\x2', '\x2', 'p', 's', '\a', ')', '\x2', '\x2', 
		'q', 's', '\a', '*', '\x2', '\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 
		'r', 'q', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\x5', '\x30', '\x19', '\x2', 'u', 'v', '\a', '$', '\x2', '\x2', 
		'v', '}', '\x5', '\x2', '\x2', '\x2', 'w', 'x', '\x5', '\x30', '\x19', 
		'\x2', 'x', 'y', '\a', '$', '\x2', '\x2', 'y', 'z', '\x5', '\x2', '\x2', 
		'\x2', 'z', '|', '\x3', '\x2', '\x2', '\x2', '{', 'w', '\x3', '\x2', '\x2', 
		'\x2', '|', '\x7F', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', 
		'\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x81', '\a', '+', '\x2', '\x2', '\x81', '\x82', '\x5', '\x2', '\x2', 
		'\x2', '\x82', '\x11', '\x3', '\x2', '\x2', '\x2', '\x83', '\x88', '\x5', 
		'\x14', '\v', '\x2', '\x84', '\x85', '\a', '-', '\x2', '\x2', '\x85', 
		'\x87', '\x5', '\x14', '\v', '\x2', '\x86', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x88', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x89', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x90', '\x5', '\x16', '\f', '\x2', '\x8C', '\x8D', '\a', 
		',', '\x2', '\x2', '\x8D', '\x8F', '\x5', '\x16', '\f', '\x2', '\x8E', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x15', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x93', '\xA2', '\x5', '\x18', '\r', 
		'\x2', '\x94', '\x9B', '\a', '\b', '\x2', '\x2', '\x95', '\x9B', '\a', 
		'\t', '\x2', '\x2', '\x96', '\x9B', '\a', '\n', '\x2', '\x2', '\x97', 
		'\x9B', '\a', '\v', '\x2', '\x2', '\x98', '\x9B', '\a', '\f', '\x2', '\x2', 
		'\x99', '\x9B', '\a', '\r', '\x2', '\x2', '\x9A', '\x94', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x95', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', '\xA3', 
		'\x5', '\x18', '\r', '\x2', '\x9D', '\x9E', '\a', '.', '\x2', '\x2', '\x9E', 
		'\x9F', '\x5', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\a', ',', '\x2', 
		'\x2', '\xA0', '\xA1', '\x5', '\x2', '\x2', '\x2', '\xA1', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\x9A', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\x17', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x5', 
		'\x1A', '\xE', '\x2', '\xA5', '\x19', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xAB', '\x5', '\x1C', '\xF', '\x2', '\xA7', '\xA8', '\a', '\xE', '\x2', 
		'\x2', '\xA8', '\xAA', '\x5', '\x1C', '\xF', '\x2', '\xA9', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xB3', '\x5', '\x1E', '\x10', '\x2', '\xAF', 
		'\xB0', '\a', '\xF', '\x2', '\x2', '\xB0', '\xB2', '\x5', '\x1E', '\x10', 
		'\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xBB', '\x5', 
		' ', '\x11', '\x2', '\xB7', '\xB8', '\a', '\x10', '\x2', '\x2', '\xB8', 
		'\xBA', '\x5', ' ', '\x11', '\x2', '\xB9', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xC3', '\x5', '\"', '\x12', '\x2', '\xBF', '\xC0', '\a', 
		'\x11', '\x2', '\x2', '\xC0', '\xC2', '\x5', '\"', '\x12', '\x2', '\xC1', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '!', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xCB', '\x5', '$', '\x13', 
		'\x2', '\xC7', '\xC8', '\a', '\x12', '\x2', '\x2', '\xC8', '\xCA', '\x5', 
		'$', '\x13', '\x2', '\xC9', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCE', 
		'\xD0', '\a', '\xF', '\x2', '\x2', '\xCF', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xD5', '\x5', '*', '\x16', '\x2', '\xD5', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD9', '\x5', ',', '\x17', '\x2', '\xD7', 
		'\xD9', '\x5', '(', '\x15', '\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD9', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xDF', '\x5', '\x30', '\x19', '\x2', '\xDB', 
		'\xDC', '\a', '\x14', '\x2', '\x2', '\xDC', '\xDE', '\x5', '\x30', '\x19', 
		'\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', ')', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE5', '\x5', 
		',', '\x17', '\x2', '\xE3', '\xE5', '\a', ' ', '\x2', '\x2', '\xE4', '\xE2', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\xE5', '+', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xEB', '\x5', '\x36', 
		'\x1C', '\x2', '\xE7', '\xEB', '\x5', '\x32', '\x1A', '\x2', '\xE8', '\xEB', 
		'\x5', '\x34', '\x1B', '\x2', '\xE9', '\xEB', '\x5', '.', '\x18', '\x2', 
		'\xEA', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE7', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE9', 
		'\x3', '\x2', '\x2', '\x2', '\xEB', '-', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xED', '\x5', '\x30', '\x19', '\x2', '\xED', '\xEE', '\a', '\x16', '\x2', 
		'\x2', '\xEE', '\xEF', '\x5', '\x32', '\x1A', '\x2', '\xEF', '\xF0', '\a', 
		'\x17', '\x2', '\x2', '\xF0', '/', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\xF5', '\a', '\x30', '\x2', '\x2', '\xF2', '\xF5', '\a', '-', '\x2', 
		'\x2', '\xF3', '\xF5', '\a', ',', '\x2', '\x2', '\xF4', '\xF1', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\xF5', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xF7', '\a', '\x6', '\x2', '\x2', '\xF7', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xFB', '\a', '\x1E', '\x2', '\x2', '\xF9', 
		'\xFB', '\a', '\x1F', '\x2', '\x2', '\xFA', '\xF8', '\x3', '\x2', '\x2', 
		'\x2', '\xFA', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFB', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '\xFD', '\a', '\a', '\x2', '\x2', '\xFD', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x102', '\a', '\x16', '\x2', 
		'\x2', '\xFF', '\x102', '\a', '\x19', '\x2', '\x2', '\x100', '\x102', 
		'\a', '\x18', '\x2', '\x2', '\x101', '\xFE', '\x3', '\x2', '\x2', '\x2', 
		'\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\x39', '\x3', '\x2', '\x2', '\x2', '\x103', 
		'\x107', '\a', '\x17', '\x2', '\x2', '\x104', '\x107', '\a', '\x18', '\x2', 
		'\x2', '\x105', '\x107', '\a', '\x19', '\x2', '\x2', '\x106', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\x106', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\x105', '\x3', '\x2', '\x2', '\x2', '\x107', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x1B', '\x44', 'K', 'Q', '^', 'g', 'r', '}', '\x88', '\x90', 
		'\x9A', '\xA2', '\xAB', '\xB3', '\xBB', '\xC3', '\xCB', '\xD1', '\xD8', 
		'\xDF', '\xE4', '\xEA', '\xF4', '\xFA', '\x101', '\x106',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace RulesDoer.Core.Expressions.FEEL
