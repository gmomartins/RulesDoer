//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FEELRule.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RulesDoer.Core.Expressions.FEEL {

using RulesDoer.Core.Runtime.Context;
using RulesDoer.Core.Expressions.FEEL.Ast;
using RulesDoer.Core.Expressions.FEEL.Ast.Elements.Literal;
using RulesDoer.Core.Expressions.FEEL.Ast.Elements.Comparison;
using RulesDoer.Core.Expressions.FEEL.Ast.Elements.Logic;
using RulesDoer.Core.Expressions.FEEL.Ast.Elements.Maths;
using RulesDoer.Core.Expressions.FEEL.Ast.Elements.Match;
using RulesDoer.Core.Expressions.FEEL.Ast.Elements.Function;
using RulesDoer.Core.Expressions.FEEL.Ast.Elements;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class FEELRule : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BLOCK_COMMENT=1, LINE_COMMENT=2, WS=3, STRING=4, NUMBER=5, EQ=6, NE=7, 
		LT=8, GT=9, LE=10, GE=11, PLUS=12, MINUS=13, STAR=14, FORWARD_SLASH=15, 
		STAR_STAR=16, DOT_DOT=17, DOT=18, COMMA=19, PAREN_OPEN=20, PAREN_CLOSE=21, 
		BRACKET_OPEN=22, BRACKET_CLOSE=23, BRACE_OPEN=24, BRACE_CLOSE=25, COLON=26, 
		NOT=27, TRUE=28, FALSE=29, NULL=30, FUNCTION=31, EXTERNAL=32, FOR=33, 
		IN=34, RETURN=35, IF=36, THEN=37, ELSE=38, SOME=39, EVERY=40, SATISFIES=41, 
		AND=42, OR=43, BETWEEN=44, INSTANCE_OF=45, DATETIMELIT=46, NAME=47;
	public const int
		RULE_simpleExpressionsBase = 0, RULE_expressionBase = 1, RULE_expression = 2, 
		RULE_textualExpression = 3, RULE_simpleExpressions = 4, RULE_simpleExpression = 5, 
		RULE_arithmeticExpression = 6, RULE_parameters = 7, RULE_namedParameters = 8, 
		RULE_positionalParameters = 9, RULE_simpleValue = 10, RULE_typeIs = 11, 
		RULE_qualifiedName = 12, RULE_literal = 13, RULE_simpleLiteral = 14, RULE_dateTimeLiteral = 15, 
		RULE_identifier = 16, RULE_stringLiteral = 17, RULE_booleanLiteral = 18, 
		RULE_numericLiteral = 19, RULE_intervalStartPar = 20, RULE_intervalEndPar = 21, 
		RULE_parameterName = 22;
	public static readonly string[] ruleNames = {
		"simpleExpressionsBase", "expressionBase", "expression", "textualExpression", 
		"simpleExpressions", "simpleExpression", "arithmeticExpression", "parameters", 
		"namedParameters", "positionalParameters", "simpleValue", "typeIs", "qualifiedName", 
		"literal", "simpleLiteral", "dateTimeLiteral", "identifier", "stringLiteral", 
		"booleanLiteral", "numericLiteral", "intervalStartPar", "intervalEndPar", 
		"parameterName"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'!='", "'<'", "'>'", "'<='", 
		"'>='", "'+'", "'-'", "'*'", "'/'", "'**'", "'..'", "'.'", "','", "'('", 
		"')'", "'['", "']'", "'{'", "'}'", "':'", "'not'", "'true'", "'false'", 
		"'null'", "'function'", "'external'", "'for'", "'in'", "'return'", "'if'", 
		"'then'", "'else'", "'some'", "'every'", "'satisfies'", "'and'", "'or'", 
		"'between'", "'instance of'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BLOCK_COMMENT", "LINE_COMMENT", "WS", "STRING", "NUMBER", "EQ", 
		"NE", "LT", "GT", "LE", "GE", "PLUS", "MINUS", "STAR", "FORWARD_SLASH", 
		"STAR_STAR", "DOT_DOT", "DOT", "COMMA", "PAREN_OPEN", "PAREN_CLOSE", "BRACKET_OPEN", 
		"BRACKET_CLOSE", "BRACE_OPEN", "BRACE_CLOSE", "COLON", "NOT", "TRUE", 
		"FALSE", "NULL", "FUNCTION", "EXTERNAL", "FOR", "IN", "RETURN", "IF", 
		"THEN", "ELSE", "SOME", "EVERY", "SATISFIES", "AND", "OR", "BETWEEN", 
		"INSTANCE_OF", "DATETIMELIT", "NAME"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FEELRule.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FEELRule() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}




		public FEELRule(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FEELRule(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SimpleExpressionsBaseContext : ParserRuleContext {
		public IExpression ast;
		public SimpleExpressionsContext _simpleExpressions;
		public SimpleExpressionsContext simpleExpressions() {
			return GetRuleContext<SimpleExpressionsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(FEELRule.Eof, 0); }
		public SimpleExpressionsBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpressionsBase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterSimpleExpressionsBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitSimpleExpressionsBase(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionsBaseContext simpleExpressionsBase() {
		SimpleExpressionsBaseContext _localctx = new SimpleExpressionsBaseContext(Context, State);
		EnterRule(_localctx, 0, RULE_simpleExpressionsBase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; _localctx._simpleExpressions = simpleExpressions();
			_localctx.ast =  _localctx._simpleExpressions.ast;
			State = 48; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionBaseContext : ParserRuleContext {
		public IExpression ast;
		public ExpressionContext _expression;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(FEELRule.Eof, 0); }
		public ExpressionBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionBase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterExpressionBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitExpressionBase(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionBaseContext expressionBase() {
		ExpressionBaseContext _localctx = new ExpressionBaseContext(Context, State);
		EnterRule(_localctx, 2, RULE_expressionBase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; _localctx._expression = expression();
			_localctx.ast =  _localctx._expression.ast;
			State = 52; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IExpression ast;
		public TextualExpressionContext _textualExpression;
		public TextualExpressionContext textualExpression() {
			return GetRuleContext<TextualExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; _localctx._textualExpression = textualExpression(0);
			_localctx.ast =  _localctx._textualExpression.ast;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextualExpressionContext : ParserRuleContext {
		public IExpression ast;
		public TextualExpressionContext left;
		public TextualExpressionContext as1;
		public ArithmeticExpressionContext _arithmeticExpression;
		public TextualExpressionContext _textualExpression;
		public TextualExpressionContext right;
		public IToken op;
		public TextualExpressionContext as2;
		public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		public ITerminalNode PAREN_OPEN() { return GetToken(FEELRule.PAREN_OPEN, 0); }
		public TextualExpressionContext[] textualExpression() {
			return GetRuleContexts<TextualExpressionContext>();
		}
		public TextualExpressionContext textualExpression(int i) {
			return GetRuleContext<TextualExpressionContext>(i);
		}
		public ITerminalNode PAREN_CLOSE() { return GetToken(FEELRule.PAREN_CLOSE, 0); }
		public ITerminalNode OR() { return GetToken(FEELRule.OR, 0); }
		public ITerminalNode AND() { return GetToken(FEELRule.AND, 0); }
		public ITerminalNode EQ() { return GetToken(FEELRule.EQ, 0); }
		public ITerminalNode NE() { return GetToken(FEELRule.NE, 0); }
		public ITerminalNode LT() { return GetToken(FEELRule.LT, 0); }
		public ITerminalNode GT() { return GetToken(FEELRule.GT, 0); }
		public ITerminalNode LE() { return GetToken(FEELRule.LE, 0); }
		public ITerminalNode GE() { return GetToken(FEELRule.GE, 0); }
		public TextualExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textualExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterTextualExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitTextualExpression(this);
		}
	}

	[RuleVersion(0)]
	public TextualExpressionContext textualExpression() {
		return textualExpression(0);
	}

	private TextualExpressionContext textualExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TextualExpressionContext _localctx = new TextualExpressionContext(Context, _parentState);
		TextualExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_textualExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				}
				break;
			case 2:
				{
				State = 58; _localctx._arithmeticExpression = arithmeticExpression(0);
				_localctx.ast =  _localctx._arithmeticExpression.ast;
				}
				break;
			case 3:
				{
				State = 61; Match(PAREN_OPEN);
				State = 62; _localctx._textualExpression = textualExpression(0);
				_localctx.ast =  _localctx._textualExpression.ast;
				State = 64; Match(PAREN_CLOSE);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 99;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 97;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new TextualExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_textualExpression);
						State = 68;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 69; Match(OR);
						State = 70; _localctx.right = _localctx._textualExpression = textualExpression(6);
						_localctx.ast =  new Disjunction(_localctx.left.ast, _localctx.right.ast);
						          		
						}
						break;
					case 2:
						{
						_localctx = new TextualExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_textualExpression);
						State = 73;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 74; Match(AND);
						State = 75; _localctx.right = _localctx._textualExpression = textualExpression(5);
						_localctx.ast =  new Conjuction(_localctx.left.ast, _localctx.right.ast);
						          		
						}
						break;
					case 3:
						{
						_localctx = new TextualExpressionContext(_parentctx, _parentState);
						_localctx.as1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_textualExpression);
						State = 78;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						var opEnum = OperatorEnum.NF;
						State = 92;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case EQ:
							{
							State = 80; _localctx.op = Match(EQ);
							 opEnum = OperatorEnum.EQ;
							}
							break;
						case NE:
							{
							State = 82; _localctx.op = Match(NE);
							 opEnum = OperatorEnum.NE;
							}
							break;
						case LT:
							{
							State = 84; _localctx.op = Match(LT);
							 opEnum = OperatorEnum.LT;
							}
							break;
						case GT:
							{
							State = 86; _localctx.op = Match(GT);
							 opEnum = OperatorEnum.GT;
							}
							break;
						case LE:
							{
							State = 88; _localctx.op = Match(LE);
							 opEnum = OperatorEnum.LE;
							}
							break;
						case GE:
							{
							State = 90; _localctx.op = Match(GE);
							 opEnum = OperatorEnum.GE;
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 94; _localctx.as2 = _localctx._textualExpression = textualExpression(4);
						_localctx.ast =  new Relational(opEnum, _localctx.as1.ast, _localctx.as2.ast);
						}
						break;
					}
					} 
				}
				State = 101;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleExpressionsContext : ParserRuleContext {
		public IExpression ast;
		public SimpleExpressionContext _simpleExpression;
		public SimpleExpressionContext exp;
		public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FEELRule.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FEELRule.COMMA, i);
		}
		public SimpleExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpressions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterSimpleExpressions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitSimpleExpressions(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionsContext simpleExpressions() {
		SimpleExpressionsContext _localctx = new SimpleExpressionsContext(Context, State);
		EnterRule(_localctx, 8, RULE_simpleExpressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			List<IExpression> exprList = new List<IExpression>();
			State = 103; _localctx._simpleExpression = simpleExpression();
			exprList.Add(_localctx._simpleExpression.ast);
					
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 105; Match(COMMA);
				State = 106; _localctx.exp = _localctx._simpleExpression = simpleExpression();
				exprList.Add(_localctx.exp.ast);
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			_localctx.ast =  new ManyExpressions(exprList);
					
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		public IExpression ast;
		public ArithmeticExpressionContext _arithmeticExpression;
		public SimpleValueContext _simpleValue;
		public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterSimpleExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitSimpleExpression(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_simpleExpression);
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 116; _localctx._arithmeticExpression = arithmeticExpression(0);
				_localctx.ast =  _localctx._arithmeticExpression.ast;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 119; _localctx._simpleValue = simpleValue();
				_localctx.ast =  _localctx._simpleValue.ast; 
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticExpressionContext : ParserRuleContext {
		public IExpression ast;
		public ArithmeticExpressionContext left;
		public ArithmeticExpressionContext expr;
		public ArithmeticExpressionContext parent;
		public ArithmeticExpressionContext function;
		public ArithmeticExpressionContext _arithmeticExpression;
		public ExpressionContext filter;
		public LiteralContext lit;
		public IdentifierContext token;
		public ArithmeticExpressionContext right;
		public TypeIsContext _typeIs;
		public IToken child;
		public ParametersContext pm;
		public ArithmeticExpressionContext[] arithmeticExpression() {
			return GetRuleContexts<ArithmeticExpressionContext>();
		}
		public ArithmeticExpressionContext arithmeticExpression(int i) {
			return GetRuleContext<ArithmeticExpressionContext>(i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(FEELRule.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(FEELRule.MINUS, i);
		}
		public ITerminalNode BRACKET_OPEN() { return GetToken(FEELRule.BRACKET_OPEN, 0); }
		public ITerminalNode BRACKET_CLOSE() { return GetToken(FEELRule.BRACKET_CLOSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode PAREN_OPEN() { return GetToken(FEELRule.PAREN_OPEN, 0); }
		public ITerminalNode PAREN_CLOSE() { return GetToken(FEELRule.PAREN_CLOSE, 0); }
		public ITerminalNode PLUS() { return GetToken(FEELRule.PLUS, 0); }
		public ITerminalNode STAR() { return GetToken(FEELRule.STAR, 0); }
		public ITerminalNode FORWARD_SLASH() { return GetToken(FEELRule.FORWARD_SLASH, 0); }
		public ITerminalNode STAR_STAR() { return GetToken(FEELRule.STAR_STAR, 0); }
		public ITerminalNode INSTANCE_OF() { return GetToken(FEELRule.INSTANCE_OF, 0); }
		public TypeIsContext typeIs() {
			return GetRuleContext<TypeIsContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(FEELRule.DOT, 0); }
		public ITerminalNode NAME() { return GetToken(FEELRule.NAME, 0); }
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ArithmeticExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterArithmeticExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitArithmeticExpression(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticExpressionContext arithmeticExpression() {
		return arithmeticExpression(0);
	}

	private ArithmeticExpressionContext arithmeticExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArithmeticExpressionContext _localctx = new ArithmeticExpressionContext(Context, _parentState);
		ArithmeticExpressionContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_arithmeticExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 126;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 125; Match(MINUS);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 128;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 130; _localctx.expr = _localctx._arithmeticExpression = arithmeticExpression(8);
				_localctx.ast =  new ArithmeticNegation(_localctx.expr.ast);
				}
				break;
			case 2:
				{
				State = 133; Match(BRACKET_OPEN);
				State = 134; _localctx.filter = expression();
				State = 135; Match(BRACKET_CLOSE);
				}
				break;
			case 3:
				{
				State = 137; _localctx.lit = literal();
				_localctx.ast =  _localctx.lit.ast;
				}
				break;
			case 4:
				{
				State = 140; _localctx.token = identifier();
				_localctx.ast =  new Name((_localctx.token!=null?TokenStream.GetText(_localctx.token.Start,_localctx.token.Stop):null));
				}
				break;
			case 5:
				{
				State = 143; Match(PAREN_OPEN);
				State = 144; _localctx._arithmeticExpression = arithmeticExpression(0);
				_localctx.ast =  _localctx._arithmeticExpression.ast;
				State = 146; Match(PAREN_CLOSE);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 190;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 188;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 150;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 151; Match(PLUS);
						State = 152; _localctx.right = _localctx._arithmeticExpression = arithmeticExpression(14);
						_localctx.ast =  new Addition(_localctx.left.ast, _localctx.right.ast);
						          			
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 155;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 156; Match(MINUS);
						State = 157; _localctx.right = _localctx._arithmeticExpression = arithmeticExpression(13);
						_localctx.ast =  new Subtraction(_localctx.left.ast, _localctx.right.ast);
						          			
						}
						break;
					case 3:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 160;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 161; Match(STAR);
						State = 162; _localctx.right = _localctx._arithmeticExpression = arithmeticExpression(12);
						_localctx.ast =  new Multiplication(_localctx.left.ast, _localctx.right.ast);
						          			
						}
						break;
					case 4:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 165;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 166; Match(FORWARD_SLASH);
						State = 167; _localctx.right = _localctx._arithmeticExpression = arithmeticExpression(11);
						_localctx.ast =  new Division(_localctx.left.ast, _localctx.right.ast);
						          			
						}
						break;
					case 5:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 170;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 171; Match(STAR_STAR);
						State = 172; _localctx.right = _localctx._arithmeticExpression = arithmeticExpression(10);
						_localctx.ast =  new Exponentiation(_localctx.left.ast, _localctx.right.ast);
						          			
						}
						break;
					case 6:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 175;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 176; Match(INSTANCE_OF);
						State = 177; _localctx._typeIs = typeIs();
						_localctx.ast =  new InstanceOf(_localctx.expr.ast, _localctx._typeIs.ast);
						          		
						}
						break;
					case 7:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.parent = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 180;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 181; Match(DOT);
						State = 182; _localctx.child = Match(NAME);
						_localctx.ast =  new PathExpression(_localctx.parent.ast, (_localctx.child!=null?_localctx.child.Text:null));
						          		
						}
						break;
					case 8:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.function = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 184;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 185; _localctx.pm = parameters();
						_localctx.ast =  new FunctionInvocation(_localctx.function.ast, _localctx.pm.ast);
						          		
						}
						break;
					}
					} 
				}
				State = 192;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public IExpression ast;
		public NamedParametersContext _namedParameters;
		public PositionalParametersContext _positionalParameters;
		public ITerminalNode PAREN_OPEN() { return GetToken(FEELRule.PAREN_OPEN, 0); }
		public ITerminalNode PAREN_CLOSE() { return GetToken(FEELRule.PAREN_CLOSE, 0); }
		public NamedParametersContext namedParameters() {
			return GetRuleContext<NamedParametersContext>(0);
		}
		public PositionalParametersContext positionalParameters() {
			return GetRuleContext<PositionalParametersContext>(0);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 14, RULE_parameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(PAREN_OPEN);
			State = 200;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				{
				State = 194; _localctx._namedParameters = namedParameters();
				_localctx.ast =  _localctx._namedParameters.ast;
				}
				}
				break;
			case 2:
				{
				{
				State = 197; _localctx._positionalParameters = positionalParameters();
				_localctx.ast =  _localctx._positionalParameters.ast;
				}
				}
				break;
			}
			State = 202; Match(PAREN_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedParametersContext : ParserRuleContext {
		public IExpression ast;
		public ParameterNameContext name;
		public ExpressionContext value;
		public ITerminalNode[] COLON() { return GetTokens(FEELRule.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(FEELRule.COLON, i);
		}
		public ParameterNameContext[] parameterName() {
			return GetRuleContexts<ParameterNameContext>();
		}
		public ParameterNameContext parameterName(int i) {
			return GetRuleContext<ParameterNameContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FEELRule.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FEELRule.COMMA, i);
		}
		public NamedParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterNamedParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitNamedParameters(this);
		}
	}

	[RuleVersion(0)]
	public NamedParametersContext namedParameters() {
		NamedParametersContext _localctx = new NamedParametersContext(Context, State);
		EnterRule(_localctx, 16, RULE_namedParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			Dictionary<string, IExpression> parameters = new Dictionary<string, IExpression>();
			State = 205; _localctx.name = parameterName();
			State = 206; Match(COLON);
			State = 207; _localctx.value = expression();
			parameters.Add((_localctx.name!=null?TokenStream.GetText(_localctx.name.Start,_localctx.name.Stop):null), _localctx.value.ast);
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 209; Match(COMMA);
				State = 210; _localctx.name = parameterName();
				State = 211; Match(COLON);
				State = 212; _localctx.value = expression();
				parameters.Add((_localctx.name!=null?TokenStream.GetText(_localctx.name.Start,_localctx.name.Stop):null), _localctx.value.ast);
							
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			_localctx.ast =  new NamedParameters(parameters);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionalParametersContext : ParserRuleContext {
		public IExpression ast;
		public ExpressionContext param;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FEELRule.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FEELRule.COMMA, i);
		}
		public PositionalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionalParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterPositionalParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitPositionalParameters(this);
		}
	}

	[RuleVersion(0)]
	public PositionalParametersContext positionalParameters() {
		PositionalParametersContext _localctx = new PositionalParametersContext(Context, State);
		EnterRule(_localctx, 18, RULE_positionalParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			List<IExpression> parameters = new List<IExpression>();
			{
			State = 223; _localctx.param = expression();
			parameters.Add(_localctx.param.ast);
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 225; Match(COMMA);
				State = 226; _localctx.param = expression();
				parameters.Add(_localctx.param.ast);
				}
				}
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			_localctx.ast =  new PositionalParameters(parameters);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleValueContext : ParserRuleContext {
		public IExpression ast;
		public SimpleLiteralContext _simpleLiteral;
		public QualifiedNameContext _qualifiedName;
		public SimpleLiteralContext simpleLiteral() {
			return GetRuleContext<SimpleLiteralContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public SimpleValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterSimpleValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitSimpleValue(this);
		}
	}

	[RuleVersion(0)]
	public SimpleValueContext simpleValue() {
		SimpleValueContext _localctx = new SimpleValueContext(Context, State);
		EnterRule(_localctx, 20, RULE_simpleValue);
		try {
			State = 242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 236; _localctx._simpleLiteral = simpleLiteral();
				_localctx.ast =  _localctx._simpleLiteral.ast; 
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 239; _localctx._qualifiedName = qualifiedName();
				_localctx.ast =  _localctx._qualifiedName.ast; 
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeIsContext : ParserRuleContext {
		public IExpression ast;
		public QualifiedNameContext _qualifiedName;
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public TypeIsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeIs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterTypeIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitTypeIs(this);
		}
	}

	[RuleVersion(0)]
	public TypeIsContext typeIs() {
		TypeIsContext _localctx = new TypeIsContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeIs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; _localctx._qualifiedName = qualifiedName();
			_localctx.ast =  new TypeIs(_localctx._qualifiedName.ast);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public IExpression ast;
		public IdentifierContext name;
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(FEELRule.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(FEELRule.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 24, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			List<string> namelist = new List<string>();
			State = 248; _localctx.name = identifier();
			namelist.Add((_localctx.name!=null?TokenStream.GetText(_localctx.name.Start,_localctx.name.Stop):null));
			State = 256;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 250; Match(DOT);
					State = 251; _localctx.name = identifier();
					namelist.Add((_localctx.name!=null?TokenStream.GetText(_localctx.name.Start,_localctx.name.Stop):null));
					}
					} 
				}
				State = 258;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			_localctx.ast =  new QualifiedName(namelist);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public IExpression ast;
		public SimpleLiteralContext _simpleLiteral;
		public SimpleLiteralContext simpleLiteral() {
			return GetRuleContext<SimpleLiteralContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(FEELRule.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 26, RULE_literal);
		try {
			State = 266;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case NUMBER:
			case TRUE:
			case FALSE:
			case DATETIMELIT:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 261; _localctx._simpleLiteral = simpleLiteral();
				_localctx.ast =  _localctx._simpleLiteral.ast; 
				}
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 264; Match(NULL);
				_localctx.ast =  new NullLiteral();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleLiteralContext : ParserRuleContext {
		public IExpression ast;
		public NumericLiteralContext _numericLiteral;
		public StringLiteralContext _stringLiteral;
		public BooleanLiteralContext _booleanLiteral;
		public DateTimeLiteralContext _dateTimeLiteral;
		public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public DateTimeLiteralContext dateTimeLiteral() {
			return GetRuleContext<DateTimeLiteralContext>(0);
		}
		public SimpleLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterSimpleLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitSimpleLiteral(this);
		}
	}

	[RuleVersion(0)]
	public SimpleLiteralContext simpleLiteral() {
		SimpleLiteralContext _localctx = new SimpleLiteralContext(Context, State);
		EnterRule(_localctx, 28, RULE_simpleLiteral);
		try {
			State = 280;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 268; _localctx._numericLiteral = numericLiteral();
				_localctx.ast =  _localctx._numericLiteral.ast; 
				}
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 271; _localctx._stringLiteral = stringLiteral();
				_localctx.ast =  _localctx._stringLiteral.ast; 
				}
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 274; _localctx._booleanLiteral = booleanLiteral();
				_localctx.ast =  _localctx._booleanLiteral.ast; 
				}
				}
				break;
			case DATETIMELIT:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 277; _localctx._dateTimeLiteral = dateTimeLiteral();
				_localctx.ast =  _localctx._dateTimeLiteral.ast; 
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeLiteralContext : ParserRuleContext {
		public IExpression ast;
		public IToken kind;
		public StringLiteralContext dateString;
		public ITerminalNode PAREN_OPEN() { return GetToken(FEELRule.PAREN_OPEN, 0); }
		public ITerminalNode PAREN_CLOSE() { return GetToken(FEELRule.PAREN_CLOSE, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ITerminalNode DATETIMELIT() { return GetToken(FEELRule.DATETIMELIT, 0); }
		public DateTimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterDateTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitDateTimeLiteral(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeLiteralContext dateTimeLiteral() {
		DateTimeLiteralContext _localctx = new DateTimeLiteralContext(Context, State);
		EnterRule(_localctx, 30, RULE_dateTimeLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 282; _localctx.kind = Match(DATETIMELIT);
			}
			State = 283; Match(PAREN_OPEN);
			State = 284; _localctx.dateString = stringLiteral();
			_localctx.ast =  new DateTimeLiteral((_localctx.kind!=null?_localctx.kind.Text:null), _localctx.dateString.ast);
					
			State = 286; Match(PAREN_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public string textVal;
		public IToken token;
		public ITerminalNode NAME() { return GetToken(FEELRule.NAME, 0); }
		public ITerminalNode DATETIMELIT() { return GetToken(FEELRule.DATETIMELIT, 0); }
		public ITerminalNode OR() { return GetToken(FEELRule.OR, 0); }
		public ITerminalNode AND() { return GetToken(FEELRule.AND, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 32, RULE_identifier);
		try {
			State = 296;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 288; _localctx.token = Match(NAME);
				_localctx.textVal =  (_localctx.token!=null?_localctx.token.Text:null);
				}
				}
				break;
			case DATETIMELIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 290; _localctx.token = Match(DATETIMELIT);
				_localctx.textVal =  (_localctx.token!=null?_localctx.token.Text:null);
				}
				break;
			case OR:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 292; _localctx.token = Match(OR);
				_localctx.textVal =  (_localctx.token!=null?_localctx.token.Text:null);
				}
				}
				break;
			case AND:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 294; _localctx.token = Match(AND);
				_localctx.textVal =  (_localctx.token!=null?_localctx.token.Text:null);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public IExpression ast;
		public IToken lit;
		public ITerminalNode STRING() { return GetToken(FEELRule.STRING, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 34, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298; _localctx.lit = Match(STRING);
			_localctx.ast =  new StringLiteral( (_localctx.lit!=null?_localctx.lit.Text:null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public IExpression ast;
		public IToken lit;
		public ITerminalNode TRUE() { return GetToken(FEELRule.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(FEELRule.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 36, RULE_booleanLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
				{
				State = 301; _localctx.lit = Match(TRUE);
				_localctx.ast =  new BooleanLiteral( (_localctx.lit!=null?_localctx.lit.Text:null));
				}
				break;
			case FALSE:
				{
				State = 303; _localctx.lit = Match(FALSE);
				_localctx.ast =  new BooleanLiteral( (_localctx.lit!=null?_localctx.lit.Text:null));
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		public IExpression ast;
		public IToken lit;
		public ITerminalNode NUMBER() { return GetToken(FEELRule.NUMBER, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterNumericLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitNumericLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 38, RULE_numericLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307; _localctx.lit = Match(NUMBER);
			_localctx.ast =  new NumericLiteral( (_localctx.lit!=null?_localctx.lit.Text:null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalStartParContext : ParserRuleContext {
		public string textVal;
		public IToken token;
		public ITerminalNode PAREN_OPEN() { return GetToken(FEELRule.PAREN_OPEN, 0); }
		public ITerminalNode BRACKET_CLOSE() { return GetToken(FEELRule.BRACKET_CLOSE, 0); }
		public ITerminalNode BRACKET_OPEN() { return GetToken(FEELRule.BRACKET_OPEN, 0); }
		public IntervalStartParContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalStartPar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterIntervalStartPar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitIntervalStartPar(this);
		}
	}

	[RuleVersion(0)]
	public IntervalStartParContext intervalStartPar() {
		IntervalStartParContext _localctx = new IntervalStartParContext(Context, State);
		EnterRule(_localctx, 40, RULE_intervalStartPar);
		try {
			State = 316;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PAREN_OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 310; _localctx.token = Match(PAREN_OPEN);
				_localctx.textVal =  (_localctx.token!=null?_localctx.token.Text:null);
				}
				}
				break;
			case BRACKET_CLOSE:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 312; _localctx.token = Match(BRACKET_CLOSE);
				_localctx.textVal =  (_localctx.token!=null?_localctx.token.Text:null);
				}
				}
				break;
			case BRACKET_OPEN:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 314; _localctx.token = Match(BRACKET_OPEN);
				_localctx.textVal =  (_localctx.token!=null?_localctx.token.Text:null);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalEndParContext : ParserRuleContext {
		public string textVal;
		public IToken token;
		public ITerminalNode PAREN_CLOSE() { return GetToken(FEELRule.PAREN_CLOSE, 0); }
		public ITerminalNode BRACKET_OPEN() { return GetToken(FEELRule.BRACKET_OPEN, 0); }
		public ITerminalNode BRACKET_CLOSE() { return GetToken(FEELRule.BRACKET_CLOSE, 0); }
		public IntervalEndParContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalEndPar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterIntervalEndPar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitIntervalEndPar(this);
		}
	}

	[RuleVersion(0)]
	public IntervalEndParContext intervalEndPar() {
		IntervalEndParContext _localctx = new IntervalEndParContext(Context, State);
		EnterRule(_localctx, 42, RULE_intervalEndPar);
		try {
			State = 324;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PAREN_CLOSE:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 318; _localctx.token = Match(PAREN_CLOSE);
				_localctx.textVal =  (_localctx.token!=null?_localctx.token.Text:null);
				}
				}
				break;
			case BRACKET_OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 320; _localctx.token = Match(BRACKET_OPEN);
				_localctx.textVal =  (_localctx.token!=null?_localctx.token.Text:null);
				}
				}
				break;
			case BRACKET_CLOSE:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 322; _localctx.token = Match(BRACKET_CLOSE);
				_localctx.textVal =  (_localctx.token!=null?_localctx.token.Text:null);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterNameContext : ParserRuleContext {
		public string textVal;
		public IToken token;
		public ITerminalNode NAME() { return GetToken(FEELRule.NAME, 0); }
		public ParameterNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.EnterParameterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFEELRuleListener typedListener = listener as IFEELRuleListener;
			if (typedListener != null) typedListener.ExitParameterName(this);
		}
	}

	[RuleVersion(0)]
	public ParameterNameContext parameterName() {
		ParameterNameContext _localctx = new ParameterNameContext(Context, State);
		EnterRule(_localctx, 44, RULE_parameterName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326; _localctx.token = Match(NAME);
			_localctx.textVal =  (_localctx.token!=null?_localctx.token.Text:null);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return textualExpression_sempred((TextualExpressionContext)_localctx, predIndex);
		case 6: return arithmeticExpression_sempred((ArithmeticExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool textualExpression_sempred(TextualExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		}
		return true;
	}
	private bool arithmeticExpression_sempred(ArithmeticExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 13);
		case 4: return Precpred(Context, 12);
		case 5: return Precpred(Context, 11);
		case 6: return Precpred(Context, 10);
		case 7: return Precpred(Context, 9);
		case 8: return Precpred(Context, 7);
		case 9: return Precpred(Context, 6);
		case 10: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x31', '\x14C', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x45', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '_', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x64', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', 'g', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'p', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', 's', '\v', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '}', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x6', '\b', '\x81', '\n', '\b', '\r', '\b', '\xE', '\b', '\x82', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '\x97', '\n', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\xBF', '\n', '\b', 
		'\f', '\b', '\xE', '\b', '\xC2', '\v', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\xCB', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\xDA', 
		'\n', '\n', '\f', '\n', '\xE', '\n', '\xDD', '\v', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xE8', '\n', '\v', '\f', 
		'\v', '\xE', '\v', '\xEB', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x5', '\f', '\xF5', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x101', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '\x104', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x10D', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\x11B', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x5', '\x12', '\x12B', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\x134', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x5', '\x16', '\x13F', '\n', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x147', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x2', '\x4', '\b', '\xE', '\x19', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x2', 
		'\x2', '\x2', '\x15E', '\x2', '\x30', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x6', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x44', '\x3', '\x2', '\x2', '\x2', '\n', 'h', '\x3', '\x2', 
		'\x2', '\x2', '\f', '|', '\x3', '\x2', '\x2', '\x2', '\xE', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\x14', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\xF4', '\x3', '\x2', '\x2', '\x2', '\x18', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\xF9', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x10C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x11A', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x11C', '\x3', '\x2', '\x2', '\x2', '\"', '\x12A', '\x3', 
		'\x2', '\x2', '\x2', '$', '\x12C', '\x3', '\x2', '\x2', '\x2', '&', '\x133', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x135', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x13E', '\x3', '\x2', '\x2', '\x2', ',', '\x146', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x148', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', 
		'\x5', '\n', '\x6', '\x2', '\x31', '\x32', '\b', '\x2', '\x1', '\x2', 
		'\x32', '\x33', '\a', '\x2', '\x2', '\x3', '\x33', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x35', '\x5', '\x6', '\x4', '\x2', '\x35', '\x36', 
		'\b', '\x3', '\x1', '\x2', '\x36', '\x37', '\a', '\x2', '\x2', '\x3', 
		'\x37', '\x5', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x5', '\b', 
		'\x5', '\x2', '\x39', ':', '\b', '\x4', '\x1', '\x2', ':', '\a', '\x3', 
		'\x2', '\x2', '\x2', ';', '\x45', '\b', '\x5', '\x1', '\x2', '<', '=', 
		'\x5', '\xE', '\b', '\x2', '=', '>', '\b', '\x5', '\x1', '\x2', '>', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '?', '@', '\a', '\x16', '\x2', '\x2', '@', 
		'\x41', '\x5', '\b', '\x5', '\x2', '\x41', '\x42', '\b', '\x5', '\x1', 
		'\x2', '\x42', '\x43', '\a', '\x17', '\x2', '\x2', '\x43', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x44', ';', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'<', '\x3', '\x2', '\x2', '\x2', '\x44', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x45', '\x65', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\f', '\a', '\x2', 
		'\x2', 'G', 'H', '\a', '-', '\x2', '\x2', 'H', 'I', '\x5', '\b', '\x5', 
		'\b', 'I', 'J', '\b', '\x5', '\x1', '\x2', 'J', '\x64', '\x3', '\x2', 
		'\x2', '\x2', 'K', 'L', '\f', '\x6', '\x2', '\x2', 'L', 'M', '\a', ',', 
		'\x2', '\x2', 'M', 'N', '\x5', '\b', '\x5', '\a', 'N', 'O', '\b', '\x5', 
		'\x1', '\x2', 'O', '\x64', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\f', 
		'\x5', '\x2', '\x2', 'Q', '^', '\b', '\x5', '\x1', '\x2', 'R', 'S', '\a', 
		'\b', '\x2', '\x2', 'S', '_', '\b', '\x5', '\x1', '\x2', 'T', 'U', '\a', 
		'\t', '\x2', '\x2', 'U', '_', '\b', '\x5', '\x1', '\x2', 'V', 'W', '\a', 
		'\n', '\x2', '\x2', 'W', '_', '\b', '\x5', '\x1', '\x2', 'X', 'Y', '\a', 
		'\v', '\x2', '\x2', 'Y', '_', '\b', '\x5', '\x1', '\x2', 'Z', '[', '\a', 
		'\f', '\x2', '\x2', '[', '_', '\b', '\x5', '\x1', '\x2', '\\', ']', '\a', 
		'\r', '\x2', '\x2', ']', '_', '\b', '\x5', '\x1', '\x2', '^', 'R', '\x3', 
		'\x2', '\x2', '\x2', '^', 'T', '\x3', '\x2', '\x2', '\x2', '^', 'V', '\x3', 
		'\x2', '\x2', '\x2', '^', 'X', '\x3', '\x2', '\x2', '\x2', '^', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '_', '`', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x5', '\b', '\x5', '\x6', '\x61', 
		'\x62', '\b', '\x5', '\x1', '\x2', '\x62', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x46', '\x3', '\x2', '\x2', '\x2', '\x63', 'K', '\x3', 
		'\x2', '\x2', '\x2', '\x63', 'P', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', '\t', '\x3', 
		'\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'h', 'i', 
		'\b', '\x6', '\x1', '\x2', 'i', 'j', '\x5', '\f', '\a', '\x2', 'j', 'q', 
		'\b', '\x6', '\x1', '\x2', 'k', 'l', '\a', '\x15', '\x2', '\x2', 'l', 
		'm', '\x5', '\f', '\a', '\x2', 'm', 'n', '\b', '\x6', '\x1', '\x2', 'n', 
		'p', '\x3', '\x2', '\x2', '\x2', 'o', 'k', '\x3', '\x2', '\x2', '\x2', 
		'p', 's', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', '\x2', 
		'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', 't', '\x3', '\x2', '\x2', '\x2', 
		's', 'q', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\b', '\x6', '\x1', '\x2', 
		'u', '\v', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x5', '\xE', '\b', '\x2', 
		'w', 'x', '\b', '\a', '\x1', '\x2', 'x', '}', '\x3', '\x2', '\x2', '\x2', 
		'y', 'z', '\x5', '\x16', '\f', '\x2', 'z', '{', '\b', '\a', '\x1', '\x2', 
		'{', '}', '\x3', '\x2', '\x2', '\x2', '|', 'v', '\x3', '\x2', '\x2', '\x2', 
		'|', 'y', '\x3', '\x2', '\x2', '\x2', '}', '\r', '\x3', '\x2', '\x2', 
		'\x2', '~', '\x80', '\b', '\b', '\x1', '\x2', '\x7F', '\x81', '\a', '\xF', 
		'\x2', '\x2', '\x80', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x85', '\x5', '\xE', '\b', '\n', '\x85', '\x86', 
		'\b', '\b', '\x1', '\x2', '\x86', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x88', '\a', '\x18', '\x2', '\x2', '\x88', '\x89', '\x5', '\x6', 
		'\x4', '\x2', '\x89', '\x8A', '\a', '\x19', '\x2', '\x2', '\x8A', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x5', '\x1C', '\xF', '\x2', 
		'\x8C', '\x8D', '\b', '\b', '\x1', '\x2', '\x8D', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x8F', '\x5', '\"', '\x12', '\x2', '\x8F', '\x90', 
		'\b', '\b', '\x1', '\x2', '\x90', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x92', '\a', '\x16', '\x2', '\x2', '\x92', '\x93', '\x5', '\xE', 
		'\b', '\x2', '\x93', '\x94', '\b', '\b', '\x1', '\x2', '\x94', '\x95', 
		'\a', '\x17', '\x2', '\x2', '\x95', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '~', '\x3', '\x2', '\x2', '\x2', '\x96', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x96', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\xC0', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\f', '\xF', 
		'\x2', '\x2', '\x99', '\x9A', '\a', '\xE', '\x2', '\x2', '\x9A', '\x9B', 
		'\x5', '\xE', '\b', '\x10', '\x9B', '\x9C', '\b', '\b', '\x1', '\x2', 
		'\x9C', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\f', '\xE', 
		'\x2', '\x2', '\x9E', '\x9F', '\a', '\xF', '\x2', '\x2', '\x9F', '\xA0', 
		'\x5', '\xE', '\b', '\xF', '\xA0', '\xA1', '\b', '\b', '\x1', '\x2', '\xA1', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\f', '\r', '\x2', 
		'\x2', '\xA3', '\xA4', '\a', '\x10', '\x2', '\x2', '\xA4', '\xA5', '\x5', 
		'\xE', '\b', '\xE', '\xA5', '\xA6', '\b', '\b', '\x1', '\x2', '\xA6', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\f', '\f', '\x2', 
		'\x2', '\xA8', '\xA9', '\a', '\x11', '\x2', '\x2', '\xA9', '\xAA', '\x5', 
		'\xE', '\b', '\r', '\xAA', '\xAB', '\b', '\b', '\x1', '\x2', '\xAB', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\f', '\v', '\x2', '\x2', 
		'\xAD', '\xAE', '\a', '\x12', '\x2', '\x2', '\xAE', '\xAF', '\x5', '\xE', 
		'\b', '\f', '\xAF', '\xB0', '\b', '\b', '\x1', '\x2', '\xB0', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\f', '\t', '\x2', '\x2', 
		'\xB2', '\xB3', '\a', '/', '\x2', '\x2', '\xB3', '\xB4', '\x5', '\x18', 
		'\r', '\x2', '\xB4', '\xB5', '\b', '\b', '\x1', '\x2', '\xB5', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\f', '\b', '\x2', '\x2', 
		'\xB7', '\xB8', '\a', '\x14', '\x2', '\x2', '\xB8', '\xB9', '\a', '\x31', 
		'\x2', '\x2', '\xB9', '\xBF', '\b', '\b', '\x1', '\x2', '\xBA', '\xBB', 
		'\f', '\x6', '\x2', '\x2', '\xBB', '\xBC', '\x5', '\x10', '\t', '\x2', 
		'\xBC', '\xBD', '\b', '\b', '\x1', '\x2', '\xBD', '\xBF', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\x98', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xB6', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\xBA', '\x3', '\x2', '\x2', '\x2', 
		'\xBF', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', 
		'\xC3', '\xCA', '\a', '\x16', '\x2', '\x2', '\xC4', '\xC5', '\x5', '\x12', 
		'\n', '\x2', '\xC5', '\xC6', '\b', '\t', '\x1', '\x2', '\xC6', '\xCB', 
		'\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x5', '\x14', '\v', '\x2', 
		'\xC8', '\xC9', '\b', '\t', '\x1', '\x2', '\xC9', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xCD', '\a', '\x17', '\x2', '\x2', '\xCD', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xCF', '\b', '\n', '\x1', '\x2', '\xCF', '\xD0', 
		'\x5', '.', '\x18', '\x2', '\xD0', '\xD1', '\a', '\x1C', '\x2', '\x2', 
		'\xD1', '\xD2', '\x5', '\x6', '\x4', '\x2', '\xD2', '\xDB', '\b', '\n', 
		'\x1', '\x2', '\xD3', '\xD4', '\a', '\x15', '\x2', '\x2', '\xD4', '\xD5', 
		'\x5', '.', '\x18', '\x2', '\xD5', '\xD6', '\a', '\x1C', '\x2', '\x2', 
		'\xD6', '\xD7', '\x5', '\x6', '\x4', '\x2', '\xD7', '\xD8', '\b', '\n', 
		'\x1', '\x2', '\xD8', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\xDD', '\x3', '\x2', '\x2', '\x2', 
		'\xDB', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', 
		'\x2', '\x2', '\xDC', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDB', 
		'\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\b', '\n', '\x1', '\x2', 
		'\xDF', '\x13', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\b', '\v', 
		'\x1', '\x2', '\xE1', '\xE2', '\x5', '\x6', '\x4', '\x2', '\xE2', '\xE9', 
		'\b', '\v', '\x1', '\x2', '\xE3', '\xE4', '\a', '\x15', '\x2', '\x2', 
		'\xE4', '\xE5', '\x5', '\x6', '\x4', '\x2', '\xE5', '\xE6', '\b', '\v', 
		'\x1', '\x2', '\xE6', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE3', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xEB', '\x3', '\x2', '\x2', '\x2', 
		'\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xE9', 
		'\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\b', '\v', '\x1', '\x2', 
		'\xED', '\x15', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\x5', '\x1E', 
		'\x10', '\x2', '\xEF', '\xF0', '\b', '\f', '\x1', '\x2', '\xF0', '\xF5', 
		'\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\x5', '\x1A', '\xE', '\x2', 
		'\xF2', '\xF3', '\b', '\f', '\x1', '\x2', '\xF3', '\xF5', '\x3', '\x2', 
		'\x2', '\x2', '\xF4', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\xF5', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\xF6', '\xF7', '\x5', '\x1A', '\xE', '\x2', '\xF7', '\xF8', '\b', '\r', 
		'\x1', '\x2', '\xF8', '\x19', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', 
		'\b', '\xE', '\x1', '\x2', '\xFA', '\xFB', '\x5', '\"', '\x12', '\x2', 
		'\xFB', '\x102', '\b', '\xE', '\x1', '\x2', '\xFC', '\xFD', '\a', '\x14', 
		'\x2', '\x2', '\xFD', '\xFE', '\x5', '\"', '\x12', '\x2', '\xFE', '\xFF', 
		'\b', '\xE', '\x1', '\x2', '\xFF', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\x100', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x101', '\x104', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\x100', '\x3', '\x2', '\x2', '\x2', '\x102', 
		'\x103', '\x3', '\x2', '\x2', '\x2', '\x103', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x104', '\x102', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', 
		'\b', '\xE', '\x1', '\x2', '\x106', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\x108', '\x5', '\x1E', '\x10', '\x2', '\x108', '\x109', '\b', 
		'\xF', '\x1', '\x2', '\x109', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10A', 
		'\x10B', '\a', ' ', '\x2', '\x2', '\x10B', '\x10D', '\b', '\xF', '\x1', 
		'\x2', '\x10C', '\x107', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x10F', '\x5', '(', '\x15', '\x2', '\x10F', '\x110', '\b', '\x10', 
		'\x1', '\x2', '\x110', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', 
		'\x5', '$', '\x13', '\x2', '\x112', '\x113', '\b', '\x10', '\x1', '\x2', 
		'\x113', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\x5', 
		'&', '\x14', '\x2', '\x115', '\x116', '\b', '\x10', '\x1', '\x2', '\x116', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118', '\x5', ' ', '\x11', 
		'\x2', '\x118', '\x119', '\b', '\x10', '\x1', '\x2', '\x119', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '\x11A', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x11A', '\x111', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x11A', '\x117', '\x3', '\x2', '\x2', '\x2', '\x11B', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\a', '\x30', '\x2', 
		'\x2', '\x11D', '\x11E', '\a', '\x16', '\x2', '\x2', '\x11E', '\x11F', 
		'\x5', '$', '\x13', '\x2', '\x11F', '\x120', '\b', '\x11', '\x1', '\x2', 
		'\x120', '\x121', '\a', '\x17', '\x2', '\x2', '\x121', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x122', '\x123', '\a', '\x31', '\x2', '\x2', '\x123', '\x12B', 
		'\b', '\x12', '\x1', '\x2', '\x124', '\x125', '\a', '\x30', '\x2', '\x2', 
		'\x125', '\x12B', '\b', '\x12', '\x1', '\x2', '\x126', '\x127', '\a', 
		'-', '\x2', '\x2', '\x127', '\x12B', '\b', '\x12', '\x1', '\x2', '\x128', 
		'\x129', '\a', ',', '\x2', '\x2', '\x129', '\x12B', '\b', '\x12', '\x1', 
		'\x2', '\x12A', '\x122', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x124', 
		'\x3', '\x2', '\x2', '\x2', '\x12A', '\x126', '\x3', '\x2', '\x2', '\x2', 
		'\x12A', '\x128', '\x3', '\x2', '\x2', '\x2', '\x12B', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x12C', '\x12D', '\a', '\x6', '\x2', '\x2', '\x12D', '\x12E', 
		'\b', '\x13', '\x1', '\x2', '\x12E', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '\x130', '\a', '\x1E', '\x2', '\x2', '\x130', '\x134', '\b', 
		'\x14', '\x1', '\x2', '\x131', '\x132', '\a', '\x1F', '\x2', '\x2', '\x132', 
		'\x134', '\b', '\x14', '\x1', '\x2', '\x133', '\x12F', '\x3', '\x2', '\x2', 
		'\x2', '\x133', '\x131', '\x3', '\x2', '\x2', '\x2', '\x134', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x135', '\x136', '\a', '\a', '\x2', '\x2', '\x136', 
		'\x137', '\b', '\x15', '\x1', '\x2', '\x137', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x138', '\x139', '\a', '\x16', '\x2', '\x2', '\x139', '\x13F', 
		'\b', '\x16', '\x1', '\x2', '\x13A', '\x13B', '\a', '\x19', '\x2', '\x2', 
		'\x13B', '\x13F', '\b', '\x16', '\x1', '\x2', '\x13C', '\x13D', '\a', 
		'\x18', '\x2', '\x2', '\x13D', '\x13F', '\b', '\x16', '\x1', '\x2', '\x13E', 
		'\x138', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13A', '\x3', '\x2', '\x2', 
		'\x2', '\x13E', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13F', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x140', '\x141', '\a', '\x17', '\x2', '\x2', '\x141', 
		'\x147', '\b', '\x17', '\x1', '\x2', '\x142', '\x143', '\a', '\x18', '\x2', 
		'\x2', '\x143', '\x147', '\b', '\x17', '\x1', '\x2', '\x144', '\x145', 
		'\a', '\x19', '\x2', '\x2', '\x145', '\x147', '\b', '\x17', '\x1', '\x2', 
		'\x146', '\x140', '\x3', '\x2', '\x2', '\x2', '\x146', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\x144', '\x3', '\x2', '\x2', '\x2', '\x147', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x148', '\x149', '\a', '\x31', '\x2', 
		'\x2', '\x149', '\x14A', '\b', '\x18', '\x1', '\x2', '\x14A', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x17', '\x44', '^', '\x63', '\x65', 'q', '|', '\x82', 
		'\x96', '\xBE', '\xC0', '\xCA', '\xDB', '\xE9', '\xF4', '\x102', '\x10C', 
		'\x11A', '\x12A', '\x133', '\x13E', '\x146',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace RulesDoer.Core.Expressions.FEEL
