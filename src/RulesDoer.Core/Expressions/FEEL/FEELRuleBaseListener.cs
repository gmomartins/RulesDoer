//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FEELRule.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RulesDoer.Core.Expressions.FEEL {

using RulesDoer.Core.Runtime.Context;
using RulesDoer.Core.Expressions.FEEL.Ast;
using RulesDoer.Core.Expressions.FEEL.Ast.Elements.Literal;
using RulesDoer.Core.Expressions.FEEL.Ast.Elements.Comparison;
using RulesDoer.Core.Expressions.FEEL.Ast.Elements.Logic;
using RulesDoer.Core.Expressions.FEEL.Ast.Elements.Maths;
using RulesDoer.Core.Expressions.FEEL.Ast.Elements.Match;
using RulesDoer.Core.Expressions.FEEL.Ast.Elements.Function;
using RulesDoer.Core.Expressions.FEEL.Ast.Elements.Boxed;
using RulesDoer.Core.Expressions.FEEL.Ast.Elements.EvalTest;
using RulesDoer.Core.Expressions.FEEL.Ast.Elements.Statement;
using RulesDoer.Core.Expressions.FEEL.Ast.Elements;


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IFEELRuleListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class FEELRuleBaseListener : IFEELRuleListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.simpleExpressionsBase"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimpleExpressionsBase([NotNull] FEELRule.SimpleExpressionsBaseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.simpleExpressionsBase"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimpleExpressionsBase([NotNull] FEELRule.SimpleExpressionsBaseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.expressionBase"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionBase([NotNull] FEELRule.ExpressionBaseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.expressionBase"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionBase([NotNull] FEELRule.ExpressionBaseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.unaryTestsBase"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnaryTestsBase([NotNull] FEELRule.UnaryTestsBaseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.unaryTestsBase"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnaryTestsBase([NotNull] FEELRule.UnaryTestsBaseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.simpleUnaryTestsBase"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimpleUnaryTestsBase([NotNull] FEELRule.SimpleUnaryTestsBaseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.simpleUnaryTestsBase"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimpleUnaryTestsBase([NotNull] FEELRule.SimpleUnaryTestsBaseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] FEELRule.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] FEELRule.ExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.simpleUnaryTests"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimpleUnaryTests([NotNull] FEELRule.SimpleUnaryTestsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.simpleUnaryTests"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimpleUnaryTests([NotNull] FEELRule.SimpleUnaryTestsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.simplePositiveUnaryTest"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimplePositiveUnaryTest([NotNull] FEELRule.SimplePositiveUnaryTestContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.simplePositiveUnaryTest"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimplePositiveUnaryTest([NotNull] FEELRule.SimplePositiveUnaryTestContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.interval"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInterval([NotNull] FEELRule.IntervalContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.interval"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInterval([NotNull] FEELRule.IntervalContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.simplePositiveUnaryTests"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimplePositiveUnaryTests([NotNull] FEELRule.SimplePositiveUnaryTestsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.simplePositiveUnaryTests"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimplePositiveUnaryTests([NotNull] FEELRule.SimplePositiveUnaryTestsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.positiveUnaryTest"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPositiveUnaryTest([NotNull] FEELRule.PositiveUnaryTestContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.positiveUnaryTest"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPositiveUnaryTest([NotNull] FEELRule.PositiveUnaryTestContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.positiveUnaryTests"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPositiveUnaryTests([NotNull] FEELRule.PositiveUnaryTestsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.positiveUnaryTests"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPositiveUnaryTests([NotNull] FEELRule.PositiveUnaryTestsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.unaryTests"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnaryTests([NotNull] FEELRule.UnaryTestsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.unaryTests"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnaryTests([NotNull] FEELRule.UnaryTestsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.boxedExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoxedExpression([NotNull] FEELRule.BoxedExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.boxedExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoxedExpression([NotNull] FEELRule.BoxedExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterList([NotNull] FEELRule.ListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitList([NotNull] FEELRule.ListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.context"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterContext([NotNull] FEELRule.ContextContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.context"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitContext([NotNull] FEELRule.ContextContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.contextEntry"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterContextEntry([NotNull] FEELRule.ContextEntryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.contextEntry"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitContextEntry([NotNull] FEELRule.ContextEntryContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.simpleExpressions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimpleExpressions([NotNull] FEELRule.SimpleExpressionsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.simpleExpressions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimpleExpressions([NotNull] FEELRule.SimpleExpressionsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.simpleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimpleExpression([NotNull] FEELRule.SimpleExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.simpleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimpleExpression([NotNull] FEELRule.SimpleExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.parameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParameters([NotNull] FEELRule.ParametersContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.parameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParameters([NotNull] FEELRule.ParametersContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.namedParameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNamedParameters([NotNull] FEELRule.NamedParametersContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.namedParameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNamedParameters([NotNull] FEELRule.NamedParametersContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.positionalParameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPositionalParameters([NotNull] FEELRule.PositionalParametersContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.positionalParameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPositionalParameters([NotNull] FEELRule.PositionalParametersContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.endpoint"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEndpoint([NotNull] FEELRule.EndpointContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.endpoint"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEndpoint([NotNull] FEELRule.EndpointContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.simpleValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimpleValue([NotNull] FEELRule.SimpleValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.simpleValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimpleValue([NotNull] FEELRule.SimpleValueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.typeIs"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeIs([NotNull] FEELRule.TypeIsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.typeIs"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeIs([NotNull] FEELRule.TypeIsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.qualifiedName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQualifiedName([NotNull] FEELRule.QualifiedNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.qualifiedName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQualifiedName([NotNull] FEELRule.QualifiedNameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteral([NotNull] FEELRule.LiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteral([NotNull] FEELRule.LiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.simpleLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimpleLiteral([NotNull] FEELRule.SimpleLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.simpleLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimpleLiteral([NotNull] FEELRule.SimpleLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.dateTimeLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDateTimeLiteral([NotNull] FEELRule.DateTimeLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.dateTimeLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDateTimeLiteral([NotNull] FEELRule.DateTimeLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifier([NotNull] FEELRule.IdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifier([NotNull] FEELRule.IdentifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.stringLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringLiteral([NotNull] FEELRule.StringLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.stringLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringLiteral([NotNull] FEELRule.StringLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.booleanLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBooleanLiteral([NotNull] FEELRule.BooleanLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.booleanLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBooleanLiteral([NotNull] FEELRule.BooleanLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.numericLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumericLiteral([NotNull] FEELRule.NumericLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.numericLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumericLiteral([NotNull] FEELRule.NumericLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.intervalStartPar"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntervalStartPar([NotNull] FEELRule.IntervalStartParContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.intervalStartPar"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntervalStartPar([NotNull] FEELRule.IntervalStartParContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.intervalEndPar"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntervalEndPar([NotNull] FEELRule.IntervalEndParContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.intervalEndPar"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntervalEndPar([NotNull] FEELRule.IntervalEndParContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.parameterName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParameterName([NotNull] FEELRule.ParameterNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.parameterName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParameterName([NotNull] FEELRule.ParameterNameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FEELRule.key"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterKey([NotNull] FEELRule.KeyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FEELRule.key"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitKey([NotNull] FEELRule.KeyContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace RulesDoer.Core.Expressions.FEEL
